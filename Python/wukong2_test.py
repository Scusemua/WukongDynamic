import sys
sys.path.append('/usr/local/lib/python3.7/site-packages')
sys.path.append('/usr/local/lib64/python3.7/site-packages')
from distributed import LocalCluster, Client
import time
import redis
import datetime
import numpy as np 
import dask_ml.datasets
import dask_ml.cluster
import time 
import sklearn.cluster
import scipy.cluster
import sklearn.datasets
import numpy as np
import pandas as pd
import time
import pandas as pd 
import dask.dataframe as ddf
from dask import delayed, compute
from distributed import visualization
from distributed import LocalCluster, Client

lc = LocalCluster(host='0.0.0.0:8786',
                proxy_address = '10.0.97.17',
                n_workers = 0,
                proxy_port = 8989,
                num_lambda_invokers = 10,
                chunk_large_tasks = False,
                big_task_threshold = 2_000_000_000,
                print_debug = True,
                print_level = 2,
                use_fargate = False,
                max_task_fanout = 330,
                reuse_lambdas = False,
                lambda_debug = True,
                debug_mode = False,
                use_bit_dep_checking = True,
                executors_use_task_queue = True,
                num_chunks_for_large_tasks = 30,
                aws_region = "us-east-1")  
c = Client(lc)

@delayed
def fib(n):
    if n < 2:
        return n
    # We can use dask.delayed and dask.compute to launch
    # computation from within tasks
    a = fib(n - 1)  # these calls are delayed
    b = fib(n - 2)
    a, b = compute(a, b)  # execute both in parallel
    return a + b

ms_100 = [-954, -911, 295, 644, -333, 402, 105, -576, -520, 182, 855, 390, -21, -136, -466, -723, 175, -944, -760, 76, 724, -28, 702, -381, 274, 275, 49, 601, -80, -459, -470, 48, 519, -514, 561, 14, -198, 530, 42, 14, -838, 179, 363, 325, 870, 598, -975, 224, 274, -728, -91, -979, -137, -960, -281, -365, -224, 582, 828, 301, 220, 174, -326, 510, 903, -156, -179, -4, -783, -734, -33, -558, 728, -376, -818, 422, -415, -33, -220, -353, -745, 81, -893, 108, -372, -777, -341, 743, 192, 75, 151, 236, -638, 578, -763, -381, -380, 11, -131, 619]
ms_250 = [479, 300, -570, 209, 38, -889, -865, 445, -8, -516, -614, -393, 442, 454, 493, 28, -909, 56, 874, -769, -866, 405, -128, -70, -429, -374, -928, -917, 78, 748, -327, 912, -310, -62, 623, 862, 403, -590, -544, -424, -393, 564, 191, -38, 554, 507, -335, -119, 292, -138, 487, -52, -911, -474, -549, -25, 439, 909, 58, 432, -82, -987, 740, -741, 286, 453, -380, -479, -704, -221, 664, 521, -154, 527, -376, 877, -836, 76, 125, 942, -424, -630, 931, -879, -698, 182, -711, 52, 782, -779, 782, 707, -868, 737, -164, -65, -261, 327, 293, -249, -408, -47, 849, 160, 706, -678, -510, -483, 853, 138, -214, -988, 545, -92, 440, 270, 256, 762, 498, 208, -272, -136, -598, -176, 773, 412, 168, -518, 962, -120, -724, 875, -890, -42, -981, -921, 681, -581, -464, -544, 229, 453, -79, 680, 169, -695, 887, -983, -759, -838, -400, 815, 330, -975, 746, -391, -648, 220, 351, 728, 231, -748, 5, -962, 839, 961, -420, -129, -695, -719, 673, -936, 725, 525, -181, -7, 209, -310, -272, -497, 78, 436, 209, 305, 517, 240, 2, 146, 471, -542, 804, -10, 220, -907, 400, 463, -749, -363, -328, 221, 314, 658, 443, -328, 243, -26, 797, -492, -37, 129, 107, -288, -547, -152, -647, 736, -507, 473, -8, -87, -940, 285, 583, 604, -998, 630, 255, 711, -37, 420, 988, -222, -891, -427, 583, -646, 227, -794, -668, -74, 398, -805, 515, 332, -938, -314, -263, -17, -365, 608]
ms_500 = [765, 16, -749, -513, -869, -513, -959, -854, -929, -91, -324, 860, -733, -5, -634, 367, -93, 452, -364, -869, -259, -184, -52, -255, 781, -93, 937, 832, 739, -915, -459, 213, -460, -856, 846, 108, -283, 993, 505, -565, 878, -401, 946, 80, 7, -41, 514, 305, -736, -9, -156, -795, 10, -164, -262, -973, -645, -703, 426, -227, -697, 109, 684, 556, 270, 709, 138, 257, -890, 739, 507, 368, 280, -56, 958, 300, 878, -271, 34, -944, 479, -77, 281, -334, 563, -672, -311, 304, -823, 342, 352, 25, 937, -750, 710, -748, 598, 636, 81, -411, -696, -447, 725, -731, -278, 630, 990, 359, 176, 947, 833, 117, -119, 228, -811, 177, -24, 856, 35, -599, 53, -346, 71, 332, -897, 292, 58, 558, -27, -455, -711, 41, -151, 596, -132, -23, -496, -486, 967, 584, 422, -953, 857, -56, 991, 605, -954, 227, 141, -865, 798, 989, -418, -360, 10, -909, 743, -981, 902, -961, 480, -388, 882, -579, -505, -653, -695, -629, -366, 376, 828, -606, -216, -423, 449, -947, -983, -645, 981, 988, -447, 92, 177, 819, -408, 771, -372, 543, -305, -334, -621, 723, -489, -81, 605, 871, -11, 348, 684, 742, -95, -383, -503, -751, -140, 976, -771, -264, 13, 659, 154, -445, 962, -155, 85, 240, -132, -716, 763, -3, -277, -809, 877, 250, -945, -698, -805, -401, 28, -883, 660, 971, 217, -88, -797, 59, -146, -441, 149, 371, 94, 982, -182, -274, -483, 723, -204, 774, -647, 603, -99, 679, -131, -808, -341, 461, -503, -80, 137, 279, -209, 904, 744, -53, -440, 609, 683, 78, -466, 209, -826, -142, -855, -978, 860, 70, 128, -153, -433, -773, 482, -920, 708, 606, 596, -725, -70, 660, -518, -52, 804, -732, -665, 731, 255, 911, -362, 787, -734, -76, -655, 975, 402, -363, 541, -324, 827, -937, -1000, 829, 843, 359, 324, -503, 625, 418, -765, 576, -724, -128, 720, 237, 94, -625, 690, 608, 181, -217, 877, 673, 76, -944, 804, 476, -245, 27, -239, 115, 467, -459, 647, -355, 818, -322, 98, -605, 385, -36, -77, 87, 454, 894, -427, 41, 853, -341, -919, 630, -764, 830, 459, 9, -218, 654, 148, 243, 707, 286, -456, 926, -16, -627, 377, 475, -207, 819, -786, 378, 405, -178, 540, 298, 447, -132, -119, -452, 149, 431, -385, -746, 855, -113, -332, 283, 486, 90, 547, 581, -905, -79, -205, 260, 448, 215, -321, -871, 828, -759, 373, -291, 210, 327, 595, -889, 53, -873, 464, 537, 401, -659, 147, -573, 827, 79, -677, 589, 312, 444, 744, 573, 390, -162, -437, -771, 212, 101, -656, 580, 701, -270, -505, -416, 51, -906, -827, -621, -276, -334, -304, 456, 158, -38, 820, 432, 912, -478, -209, 716, 345, 472, 472, 816, 748, 856, 710, -872, 682, -172, 60, 912, -801, 642, -262, 776, 802, 225, -556, -109, -677, 470, -646, -226, -245, -861, -579, 475, -153, 758, 944, 433, -13, 756, -936, 713, 193, 289, 853, 263, 88, 644]
ms_750 = [765, 16, -749, -513, -869, -513, -959, -854, -929, -91, -324, 860, -733, -5, -634, 367, -93, 452, -364, -869, -259, -184, -52, -255, 781, -93, 937, 832, 739, -915, -459, 213, -460, -856, 846, 108, -283, 993, 505, -565, 878, -401, 946, 80, 7, -41, 514, 305, -736, -9, -156, -795, 10, -164, -262, -973, -645, -703, 426, -227, -697, 109, 684, 556, 270, 709, 138, 257, -890, 739, 507, 368, 280, -56, 958, 300, 878, -271, 34, -944, 479, -77, 281, -334, 563, -672, -311, 304, -823, 342, 352, 25, 937, -750, 710, -748, 598, 636, 81, -411, -696, -447, 725, -731, -278, 630, 990, 359, 176, 947, 833, 117, -119, 228, -811, 177, -24, 856, 35, -599, 53, -346, 71, 332, -897, 292, 58, 558, -27, -455, -711, 41, -151, 596, -132, -23, -496, -486, 967, 584, 422, -953, 857, -56, 991, 605, -954, 227, 141, -865, 798, 989, -418, -360, 10, -909, 743, -981, 902, -961, 480, -388, 882, -579, -505, -653, -695, -629, -366, 376, 828, -606, -216, -423, 449, -947, -983, -645, 981, 988, -447, 92, 177, 819, -408, 771, -372, 543, -305, -334, -621, 723, -489, -81, 605, 871, -11, 348, 684, 742, -95, -383, -503, -751, -140, 976, -771, -264, 13, 659, 154, -445, 962, -155, 85, 240, -132, -716, 763, -3, -277, -809, 877, 250, -945, -698, -805, -401, 28, -883, 660, 971, 217, -88, -797, 59, -146, -441, 149, 371, 94, 982, -182, -274, -483, 723, -204, 774, -647, 603, -99, 679, -131, -808, -341, 461, -503, -80, 137, 279, -209, 904, 744, -53, -440, 609, 683, 78, -466, 209, -826, -142, -855, -978, 860, 70, 128, -153, -433, -773, 482, -920, 708, 606, 596, -725, -70, 660, -518, -52, 804, -732, -665, 731, 255, 911, -362, 787, -734, -76, -655, 975, 402, -363, 541, -324, 827, -937, -1000, 829, 843, 359, 324, -503, 625, 418, -765, 576, -724, -128, 720, 237, 94, -625, 690, 608, 181, -217, 877, 673, 76, -944, 804, 476, -245, 27, -239, 115, 467, -459, 647, -355, 818, -322, 98, -605, 385, -36, -77, 87, 454, 894, -427, 41, 853, -341, -919, 630, -764, 830, 459, 9, -218, 654, 148, 243, 707, 286, -456, 926, -16, -627, 377, 475, -207, 819, -786, 378, 405, -178, 540, 298, 447, -132, -119, -452, 149, 431, -385, -746, 855, -113, -332, 283, 486, 90, 547, 581, -905, -79, -205, 260, 448, 215, -321, -871, 828, -759, 373, -291, 210, 327, 595, -889, 53, -873, 464, 537, 401, -659, 147, -573, 827, 79, -677, 589, 312, 444, 744, 573, 390, -162, -437, -771, 212, 101, -656, 580, 701, -270, -505, -416, 51, -906, -827, -621, -276, -334, -304, 456, 158, -38, 820, 432, 912, -478, -209, 716, 345, 472, 472, 816, 748, 856, 710, -872, 682, -172, 60, 912, -801, 642, -262, 776, 802, 225, -556, -109, -677, 470, -646, -226, -245, -861, -579, 475, -153, 758, 944, 433, -13, 756, -936, 713, 193, 289, 853, 263, 88, 644]
ms_1000 = [366, -602, -836, 215, -420, -200, 921, -277, -471, -14, -404, -45, 806, -917, 77, -272, 0, -941, -160, -771, -935, 625, 434, 181, 151, -847, -208, -229, -994, 561, -331, 417, 92, 95, 240, -184, -905, 209, -548, 513, 430, -558, 238, 137, 542, 347, -291, 844, -484, -418, -360, 208, 684, 985, 231, 631, -710, -97, 942, -430, -203, 854, -576, -139, 739, 421, -588, 820, -539, 765, -680, 246, 832, -993, -890, -429, -640, 681, -535, -597, -786, 124, -127, -187, 150, 294, 283, -652, -308, 731, -332, -165, -879, 50, -329, -897, -254, 812, -599, -669, 779, -610, 882, -570, -999, 89, 35, 402, -489, -365, -783, 466, -956, -827, 217, -493, -613, 291, 206, -302, 143, -819, -723, -653, -3, 169, 247, 919, 816, 353, -608, -329, 920, -583, -814, -892, -28, 710, 202, -18, 734, 567, 312, -473, -91, 784, -382, -148, -278, 870, 555, -658, 257, -75, 463, 310, 317, 347, -768, 218, -571, -228, 285, 520, 864, 805, -509, 356, -680, 266, -913, -919, 23, 49, 466, 896, -304, 287, 273, -893, 115, -559, 629, 637, -380, 48, 479, 319, -469, -177, 107, 640, 450, 211, -610, -29, 354, 430, -349, -514, -557, -851, -254, -284, -243, 884, -880, -289, -815, -801, 312, 407, -443, 526, 400, -932, -53, 942, -686, -487, 714, -516, -120, -960, -699, 776, -824, -137, -924, -62, -729, 449, -410, -83, -172, 482, 983, -927, 486, -260, 805, -414, 828, 436, 374, -533, 510, -364, 873, 966, 160, -67, 318, -219, -201, 636, -162, -329, 605, -503, 791, -143, 941, 468, -466, 650, 886, 616, -863, -796, 120, -835, -132, -942, -807, -269, 736, -554, 135, 646, 577, 213, -830, 812, 701, 86, 369, -822, -341, -845, 801, 269, 174, 379, -331, -726, -91, -502, -32, -263, -892, 380, -430, 19, 306, -327, 323, 631, 297, -435, 381, 670, -376, 926, 831, -676, -328, -942, 988, 361, -999, 861, -887, -656, 468, -584, -155, -861, 465, 637, 798, -313, -946, -708, 444, -694, 554, 647, -91, 530, 390, -27, 651, 278, 672, 62, -752, -196, -31, 701, -533, -104, -29, 281, -138, 475, 126, 917, -545, -103, 996, 738, -476, 946, 201, 796, -127, 333, 97, -646, -835, -498, 421, -390, 220, -83, 390, 582, -56, -935, -23, -53, 127, -253, 506, 917, -389, 546, 752, 618, 670, 386, -941, -472, -227, -112, -517, 794, -949, 485, -397, -174, 675, -734, -384, -639, 901, -638, 556, -836, 625, -351, 28, 105, -64, 993, -110, 782, 457, -498, -937, 320, 253, -199, -758, 415, -532, -111, 285, -892, 850, 348, -31, 714, 937, -154, 946, 113, -854, 349, 298, -82, 535, 921, 54, -406, 118, 66, 843, 490, -327, -452, -33, -910, -559, -419, -311, -911, -237, 9, 942, -528, -646, -462, 605, -100, 289, 857, -250, -729, -938, -381, -952, -276, -804, -739, 928, -103, 880, 681, -812, -850, -742, 204, -897, 185, -879, -578, -267, 290, -318, -409, 918, -67, 159, 39, -337, -907, 116, 9, 186, -180, 169, -387, 770, -867, -419, 414, 167, 216, -691, -724, -560, -364, -753, -753, 806, -141, 9, 149, -378, -691, 450, -172, -943, 736, -980, -414, -703, 272, -509, -687, -360, -57, -557, -95, 116, -273, -934, -878, -955, -928, -258, 757, 873, 507, -787, 552, 473, 485, -313, -984, -372, -758, -979, 601, 570, -1000, 200, -226, 899, -913, 169, -987, -284, -63, 617, 25, 151, -358, -302, -265, -228, -46, 509, 412, -66, -925, -909, 7, 311, -921, 989, -89, 297, -905, 807, 348, 877, -210, -940, -138, 613, 0, 890, -638, -971, 728, 799, 102, 900, -714, -426, -501, -659, 504, 243, -810, -559, -659, 401, -16, 442, -756, -294, -338, -466, 455, -563, -415, 229, 559, 942, 396, 177, -855, -718, -277, -194, 232, 581, 934, 821, -435, 425, 844, -357, 359, -134, -916, 164, -110, -359, 923, -289, 20, -908, 669, 867, -350, -684, 54, 886, 415, -664, 728, -574, 338, 272, -493, 977, -216, 112, -442, -421, -197, -790, 682, 230, -17, -176, 47, -43, -87, 574, 501, -95, 363, 907, -788, -50, -90, 721, 685, -872, -403, 507, -66, -994, 501, -347, -763, -146, 245, 310, 193, -842, 588, -11, -995, 453, -885, -107, -114, -32, 769, -887, -734, 824, 818, -710, 787, 823, 863, 139, -620, -331, 836, 655, 272, 936, -691, 200, 476, 20, -706, 693, 366, -130, -172, -921, -460, -13, 708, -923, -109, -168, 39, 276, -778, 899, 206, -835, -715, -348, -99, -847, 446, 379, -249, -532, 888, 714, -912, -382, -891, -245, -63, -921, -840, 503, 317, -72, 785, -878, 620, -650, 930, 650, -493, -271, -186, 438, 359, -907, -925, 654, 103, 507, 27, -87, 177, 224, 768, 541, 486, 188, 596, 482, -932, 188, -660, -229, 152, -748, 95, 176, -696, -971, 460, 219, -741, 819, 65, -525, 85, 473, 135, -288, 92, 659, -120, 513, -197, 923, 77, 542, -627, 787, 515, 88, -694, -329, -688, -62, 64, 205, 990, 64, -67, -833, -998, 756, 527, 790, 938, -585, -119, 945, -835, 314, -755, 516, 795, -487, -284, 463, 796, -539, 685, 50, -713, -509, -361, -622, 793, -160, 840, -315, 811, -945, 651, 768, 821, -727, -845, 700, -144, 546, 496, 278, -899, 713, -854, -749, 443, 284, -607, -788, 752, -173, -828, -601, -135, 891, -272, -873, 165, -140, 934, 743, -479, -655, 284, -338, 370, 543, -295, -532, 275, 579, -765, 906, -574, -69, 677, -564, -230, 566, 714, -344, 191, 651, -614, 499, -492, 773, 389, -765, -274, -253, 656, -192, -387, 320, -844, 310, 284, 7, 304, -798, 89, 222, -945, -62, 580, 197, 388, -424, -919, -585, -854, -776, -482, -886, -833, 42, 503, 31, -284, -128, -467, 450, -234, 523, -144, -955, 271, 87, -394, -568, -47, 37, -777, 269, -952, -807, 281, -507, 954, -205, 701, -147, 507, -975, 500, -687, 915, -920, -273, -825, 960, 12, -837, 535, -346, 925, -584, -646, 214, -78, -257, 413, 208, -405, 415, -866, -998, 362, -475]

inputs = [ms_100, ms_250, ms_500, ms_750, ms_1000]
results = []

for arr in inputs:
    for i in range(0, 3):
        print("==== TRIAL %d/%d ====" % (i, 20))
        print("     array size: " + str(len(arr)))
        lc.scheduler.flush_data_on_redis_shards(asynchronous = False)
        df = pd.DataFrame(np.asarray([arr,arr]).T, columns=['a','b'])
        dask_df = ddf.from_pandas(df, npartitions = 10)
        start = time.time()
        x = dask_df.set_index('a').compute()
        end = time.time()
        duration = end - start 
        print("Trail %d completed in %f seconds." % (i, duration))
        metrics = lc.scheduler.get_wukong_metrics()
        tm = metrics["task-metrics"]
        lm = metrics["lambda-metrics"]
        total_duration = 0
        min_duration = float('inf')
        max_duration = 0.0
        for l in lm:
            current_dur = l.total_duration
            total_duration += current_dur
            if current_dur < min_duration:
                min_duration = current_dur
            if current_dur > max_duration:
                max_duration = current_dur
        average_duration = total_duration / len(lm)
        print("Number of Lambdas used: " + str(len(lm)))
        print("Aggregate duration: %f\nAverage Duration: %f\nMin duration: %f\nMax duration: %f" % (total_duration, average_duration, min_duration, max_duration))
        cost_128mb = 0.0000000021
        func_size = 256
        scale = func_size / 128.0
        cost_per_hr = cost_128mb * scale 
        duration_hour = total_duration / 60.0
        estimated_cost = duration_hour * cost_per_hr
        print("Estimated cost: $" + str(estimated_cost))
        results.append({
                "time": end - start,
                "cost": estimated_cost,
                "num_lambdas": len(lm),
                "aggregate_duration": total_duration,
                "min_duration": min_duration,
                "max_duration": max_duration,
                "avg_duration": average_duration
        })
    df = pd.DataFrame(results)
    df.to_csv("./data/mergesort/wukong2_mergesort_%d_bench.csv" % len(arr))
            
